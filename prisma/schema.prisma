datasource db {
  url      = env("DATABASE_URL")
  provider = "mysql"
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             Int     @id @default(autoincrement())
  username       String  @unique
  hashedPassword String
  isVerified     Boolean @default(false)
  isDeleted      Boolean @default(false)
  verifyToken    String?
  resetToken     String?
  role           Role    @default(USER)
  name           String
  email          String  @unique
  phoneNumber    String?

  verifiedAt DateTime? @db.DateTime(0)
  deletedAt  DateTime? @db.DateTime(0)
  createdAt  DateTime  @default(now()) @db.DateTime(0)
  updatedAt  DateTime  @default(now()) @updatedAt @db.DateTime(0)

  Subscription  Subscription?
  GithubProfile GithubProfile?
  Deployment    Deployment[]

  @@index([username])
  @@index([email])
}

model Subscription {
  id                      Int              @id @default(autoincrement())
  type                    SubscriptionType @default(FREE)
  stripeCheckoutSessionId String?

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  userId         Int              @unique
  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  PaymentHistory PaymentHistory[]

  @@index([userId, stripeCheckoutSessionId])
}

model PaymentHistory {
  id                 Int    @id @default(autoincrement())
  type               String
  subscriptionStatus String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  subscriptionId Int
  subscription   Subscription @relation(fields: [subscriptionId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([subscriptionId])
}

model GithubProfile {
  id             Int @id @default(autoincrement())
  installationId Int

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  Repository Repository[]

  @@index([installationId])
}

model Repository {
  id     Int    @id @default(autoincrement())
  name   String
  branch String
  url    String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  githubProfileId Int
  githubProfile   GithubProfile @relation(fields: [githubProfileId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  Deployment Deployment?

  @@index([githubProfileId])
}

model Deployment {
  id        Int              @id @default(autoincrement())
  type      DeploymentType
  framework String
  status    DeploymentStatus @default(PENDING)

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  repositoryId Int        @unique
  repository   Repository @relation(fields: [repositoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  AmplifyConfiguration AmplifyConfiguration?
  ECSConfiguration     ECSConfiguration?

  @@index([repositoryId])
}

model Environment {
  id      Int  @id @default(autoincrement())
  envVars Json @default("{}")

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  AmplifyConfiguration AmplifyConfiguration?
  ECSConfiguration     ECSConfiguration?
}

model AmplifyConfiguration {
  id         Int     @id @default(autoincrement())
  appId      String  @unique
  webhookUrl String?
  domain     String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  deploymentId Int        @unique
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  environmentId Int         @unique
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deploymentId, domain, environmentId])
}

model ECSConfiguration {
  id               Int    @id @default(autoincrement())
  serviceName      String
  cpu              String
  memory           String
  manifest         Json   @default("{}")
  dockerRepository String
  domain           String

  createdAt DateTime @default(now()) @db.DateTime(0)
  updatedAt DateTime @default(now()) @updatedAt @db.DateTime(0)

  deploymentId Int        @unique
  deployment   Deployment @relation(fields: [deploymentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  environmentId Int         @unique
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@index([deploymentId, domain, environmentId])
}

enum Role {
  USER
  ADMIN
}

enum SubscriptionType {
  FREE
  PRO
}

enum DeploymentType {
  BACKEND
  FRONTEND
}

enum DeploymentStatus {
  SUCCESS
  FAILURE
  PENDING
}
